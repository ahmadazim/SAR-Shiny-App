getwd()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
flt <- function(scenario, Nl.vec, Ng.vec, nDay, gen.pd) {
scenario <- cleanUpZeros(scenario)
flatScenario <- flaten2D(scenario, Nl = Nl.vec, Ng = Ng.vec)
flatScenario$Day <- rep(rep(1:nDay, each = gen.pd), flatScenario$SR[1])
flatScenario.last <- flatScenario[seq(gen.pd, nrow(flatScenario), gen.pd), ] ## Keep only last generation per day
days <- sort(unique(flatScenario.last$Day))
fit <- tapply(flatScenario.last$fit, flatScenario.last$Day, mean)
fit.1 <- tapply(flatScenario.last$fit.1, flatScenario.last$Day, mean)
fit.2 <- tapply(flatScenario.last$fit.2, flatScenario.last$Day, mean)
fit.3 <- tapply(flatScenario.last$fit.3, flatScenario.last$Day, mean)
d <- cbind(fit, fit.1, fit.2, fit.3, days,
matrix(rep(c(Nl.vec, Ng.vec), nDay), nrow=nDay, ncol= length(c(Nl.vec, Ng.vec)), byrow=T))
d <- as.data.frame(d)
names(d)[6:11] <- c("Nl1", "Nl2", "Nl3", "Ng1", "Ng2", "Ng3")
d
}
allScenarios <- c("Nl.11015.Ng.101010",
"Nl.11015.Ng.21015",
"Nl.11015.Ng.61012",
"Nl.124.Ng.101010",
"Nl.124.Ng.21015",
"Nl.124.Ng.61012",
"Nl.1610.Ng.101010",
"Nl.1610.Ng.21015",
"Nl.1610.Ng.61012",
"Nl.3612.Ng.21015")
x1 <- flt(Nl.124.Ng.21015, c(1,2,4), c(2,10,15), nDay = 20, gen.pd = 24)
x2 <- flt(Nl.124.Ng.61012, c(1,2,4), c(6,10,12), nDay = 20, gen.pd = 24)
x3 <- flt(Nl.124.Ng.101010, c(1,2,4), c(10,10,10), nDay = 20, gen.pd = 24)
x4 <- flt(Nl.1610.Ng.21015, c(1,6,10), c(2,10,15), nDay = 20, gen.pd = 24)
x5 <- flt(Nl.1610.Ng.61012, c(1,6,10), c(6,10,12), nDay = 20, gen.pd = 24)
x6 <- flt(Nl.1610.Ng.101010, c(1,6,10), c(10,10,10), nDay = 20, gen.pd = 24)
x7 <- flt(Nl.11015.Ng.21015, c(1,10,15), c(2,10,15), nDay = 20, gen.pd = 24)
x8 <- flt(Nl.11015.Ng.61012, c(1,10,15), c(6,10,12), nDay = 20, gen.pd = 24)
x9 <- flt(Nl.11015.Ng.101010, c(1,10,15), c(10,10,10), nDay = 20, gen.pd = 24)
x10 <- flt(Nl.3612.Ng.21015, c(3,6,12), c(3,6,12), nDay = 20, gen.pd = 24)
x13 <- flt(Nl.124.Ng.4816, c(1,2,4), c(4,8,16), nDay = 20, gen.pd = 24)
d <- rbind(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x13)
d.lm <- lm(fit ~ poly(days,3, raw = T) + Nl1 + Nl2 + Nl3 + Ng1 + Ng2 + Ng3, d)
d.lm1 <- lm(fit.1 ~ poly(days,3, raw = T) + Nl1 + Nl2 + Nl3 + Ng1 + Ng2 + Ng3, d)
d.lm2 <- lm(fit.2 ~ poly(days,3, raw = T) + Nl1 + Nl2 + Nl3 + Ng1 + Ng2 + Ng3, d)
d.lm3 <- lm(fit.3 ~ poly(days,3, raw = T) + Nl1 + Nl2 + Nl3 + Ng1 + Ng2 + Ng3, d)
# User input
Nl1 <- 3; Nl2 <- 6; Nl3 = 10; Ng1 = 6; Ng2 = 10; Ng3 = 12
# construct new data using user input
newD <- data.frame(days = 1:30, Nl1, Nl2, Nl3, Ng1, Ng2, Ng3)
newD1 <- data.frame(days = 1:30, Nl1, Nl2, Nl3, Ng1, Ng2, Ng3)
newD2 <- data.frame(days = 1:30, Nl1, Nl2, Nl3, Ng1, Ng2, Ng3)
newD3 <- data.frame(days = 1:30, Nl1, Nl2, Nl3, Ng1, Ng2, Ng3)
# predict fitness based on user input
fit.pred <- predict(d.lm, newdata = newD)
fit1.pred <- predict(d.lm1, newdata = newD1)
fit2.pred <- predict(d.lm2, newdata = newD2)
fit3.pred <- predict(d.lm3, newdata = newD3)
plot(1:30, fit.pred)
points(1:30, fit1.pred)
points(1:30, fit2.pred)
points(1:30, fit3.pred)
flt <- function(scenario, Nl.vec, Ng.vec, nDay, gen.pd) {
scenario <- cleanUpZeros(scenario)
flatScenario <- flaten2D(scenario, Nl = Nl.vec, Ng = Ng.vec)
flatScenario$Day <- rep(rep(1:nDay, each = gen.pd), flatScenario$SR[1])
flatScenario.last <- flatScenario[seq(gen.pd, nrow(flatScenario), gen.pd), ] ## Keep only last generation per day
days <- sort(unique(flatScenario.last$Day))
fit <- tapply(flatScenario.last$fit, flatScenario.last$Day, mean)
fit.1 <- tapply(flatScenario.last$fit.1, flatScenario.last$Day, mean)
fit.2 <- tapply(flatScenario.last$fit.2, flatScenario.last$Day, mean)
fit.3 <- tapply(flatScenario.last$fit.3, flatScenario.last$Day, mean)
d <- cbind(fit, fit.1, fit.2, fit.3, days,
matrix(rep(c(Nl.vec, Ng.vec), nDay), nrow=nDay, ncol= length(c(Nl.vec, Ng.vec)), byrow=T))
d <- as.data.frame(d)
names(d)[6:11] <- c("Nl1", "Nl2", "Nl3", "Ng1", "Ng2", "Ng3")
d
}
allScenarios <- c("Nl.11015.Ng.101010",
"Nl.11015.Ng.21015",
"Nl.11015.Ng.61012",
"Nl.124.Ng.101010",
"Nl.124.Ng.21015",
"Nl.124.Ng.61012",
"Nl.1610.Ng.101010",
"Nl.1610.Ng.21015",
"Nl.1610.Ng.61012",
"Nl.3612.Ng.21015")
x1 <- flt(Nl.124.Ng.21015, c(1,2,4), c(2,10,15), nDay = 20, gen.pd = 24)
x2 <- flt(Nl.124.Ng.61012, c(1,2,4), c(6,10,12), nDay = 20, gen.pd = 24)
cleanUpZeros <- function(ar) {
# ar: 3-dim'l array
i0 <- which(apply(ar, 3, function(x) {mean(x[,1])}) == 0)
if(length(i0)) return(ar[,,-i0])
else return(ar)
}
## Flatten into 2-dim'l and characterize resulting array
flaten2D <- function(ar, Nl, Ng) {
successRuns <- dim(ar)[3]
TwoDimAr <- do.call('rbind', lapply(1:successRuns, function(x) ar[,,x]))
## attach number of successful runs, number of loci and number of genes to the 2-dim'l flat array
TwoDimAr <- as.data.frame(TwoDimAr)
names(TwoDimAr) <- c('ni', 'fit', 'fit.1', 'fit.2', 'fit.3')
TwoDimAr$SR <- successRuns
TwoDimAr$Nl1 <- Nl[1]; TwoDimAr$Nl2 <- Nl[2]; TwoDimAr$Nl3 <- Nl[3]
TwoDimAr$Ng1 <- Ng[1]; TwoDimAr$Ng2 <- Ng[2]; TwoDimAr$Ng3 <- Ng[3]
return(TwoDimAr)
}
flt <- function(scenario, Nl.vec, Ng.vec, nDay, gen.pd) {
scenario <- cleanUpZeros(scenario)
flatScenario <- flaten2D(scenario, Nl = Nl.vec, Ng = Ng.vec)
flatScenario$Day <- rep(rep(1:nDay, each = gen.pd), flatScenario$SR[1])
flatScenario.last <- flatScenario[seq(gen.pd, nrow(flatScenario), gen.pd), ] ## Keep only last generation per day
days <- sort(unique(flatScenario.last$Day))
fit <- tapply(flatScenario.last$fit, flatScenario.last$Day, mean)
fit.1 <- tapply(flatScenario.last$fit.1, flatScenario.last$Day, mean)
fit.2 <- tapply(flatScenario.last$fit.2, flatScenario.last$Day, mean)
fit.3 <- tapply(flatScenario.last$fit.3, flatScenario.last$Day, mean)
d <- cbind(fit, fit.1, fit.2, fit.3, days,
matrix(rep(c(Nl.vec, Ng.vec), nDay), nrow=nDay, ncol= length(c(Nl.vec, Ng.vec)), byrow=T))
d <- as.data.frame(d)
names(d)[6:11] <- c("Nl1", "Nl2", "Nl3", "Ng1", "Ng2", "Ng3")
d
}
allScenarios <- c("Nl.11015.Ng.101010",
"Nl.11015.Ng.21015",
"Nl.11015.Ng.61012",
"Nl.124.Ng.101010",
"Nl.124.Ng.21015",
"Nl.124.Ng.61012",
"Nl.1610.Ng.101010",
"Nl.1610.Ng.21015",
"Nl.1610.Ng.61012",
"Nl.3612.Ng.21015")
x1 <- flt(Nl.124.Ng.21015, c(1,2,4), c(2,10,15), nDay = 20, gen.pd = 24)
load("C:/Users/Ahmad Abdel-Azim/Desktop/simulationShinyR/.RData")
load("C:/Users/Ahmad Abdel-Azim/Documents/Research/AntibioticSimulation/R files/simulate/.RData")
load("C:/Users/Ahmad Abdel-Azim/Desktop/simulationShinyR/.RData")
RData <- read.table("C:/Users/Ahmad Abdel-Azim/Downloads/RData", encoding="windows-1252", quote="\"")
View(RData)
load("C:/Users/Ahmad Abdel-Azim/Downloads/RData")
ls()
Nl.11015.Ng.101010
cleanUpZeros <- function(ar) {
# ar: 3-dim'l array
i0 <- which(apply(ar, 3, function(x) {mean(x[,1])}) == 0)
if(length(i0)) return(ar[,,-i0])
else return(ar)
}
## Flatten into 2-dim'l and characterize resulting array
flaten2D <- function(ar, Nl, Ng) {
successRuns <- dim(ar)[3]
TwoDimAr <- do.call('rbind', lapply(1:successRuns, function(x) ar[,,x]))
## attach number of successful runs, number of loci and number of genes to the 2-dim'l flat array
TwoDimAr <- as.data.frame(TwoDimAr)
names(TwoDimAr) <- c('ni', 'fit', 'fit.1', 'fit.2', 'fit.3')
TwoDimAr$SR <- successRuns
TwoDimAr$Nl1 <- Nl[1]; TwoDimAr$Nl2 <- Nl[2]; TwoDimAr$Nl3 <- Nl[3]
TwoDimAr$Ng1 <- Ng[1]; TwoDimAr$Ng2 <- Ng[2]; TwoDimAr$Ng3 <- Ng[3]
return(TwoDimAr)
}
flt <- function(scenario, Nl.vec, Ng.vec, nDay, gen.pd) {
scenario <- cleanUpZeros(scenario)
flatScenario <- flaten2D(scenario, Nl = Nl.vec, Ng = Ng.vec)
flatScenario$Day <- rep(rep(1:nDay, each = gen.pd), flatScenario$SR[1])
flatScenario.last <- flatScenario[seq(gen.pd, nrow(flatScenario), gen.pd), ] ## Keep only last generation per day
days <- sort(unique(flatScenario.last$Day))
fit <- tapply(flatScenario.last$fit, flatScenario.last$Day, mean)
fit.1 <- tapply(flatScenario.last$fit.1, flatScenario.last$Day, mean)
fit.2 <- tapply(flatScenario.last$fit.2, flatScenario.last$Day, mean)
fit.3 <- tapply(flatScenario.last$fit.3, flatScenario.last$Day, mean)
d <- cbind(fit, fit.1, fit.2, fit.3, days,
matrix(rep(c(Nl.vec, Ng.vec), nDay), nrow=nDay, ncol= length(c(Nl.vec, Ng.vec)), byrow=T))
d <- as.data.frame(d)
names(d)[6:11] <- c("Nl1", "Nl2", "Nl3", "Ng1", "Ng2", "Ng3")
d
}
allScenarios <- c("Nl.11015.Ng.101010",
"Nl.11015.Ng.21015",
"Nl.11015.Ng.61012",
"Nl.124.Ng.101010",
"Nl.124.Ng.21015",
"Nl.124.Ng.61012",
"Nl.1610.Ng.101010",
"Nl.1610.Ng.21015",
"Nl.1610.Ng.61012",
"Nl.3612.Ng.21015")
x1 <- flt(Nl.124.Ng.21015, c(1,2,4), c(2,10,15), nDay = 20, gen.pd = 24)
x2 <- flt(Nl.124.Ng.61012, c(1,2,4), c(6,10,12), nDay = 20, gen.pd = 24)
x3 <- flt(Nl.124.Ng.101010, c(1,2,4), c(10,10,10), nDay = 20, gen.pd = 24)
x4 <- flt(Nl.1610.Ng.21015, c(1,6,10), c(2,10,15), nDay = 20, gen.pd = 24)
x5 <- flt(Nl.1610.Ng.61012, c(1,6,10), c(6,10,12), nDay = 20, gen.pd = 24)
x6 <- flt(Nl.1610.Ng.101010, c(1,6,10), c(10,10,10), nDay = 20, gen.pd = 24)
x7 <- flt(Nl.11015.Ng.21015, c(1,10,15), c(2,10,15), nDay = 20, gen.pd = 24)
x8 <- flt(Nl.11015.Ng.61012, c(1,10,15), c(6,10,12), nDay = 20, gen.pd = 24)
x9 <- flt(Nl.11015.Ng.101010, c(1,10,15), c(10,10,10), nDay = 20, gen.pd = 24)
x10 <- flt(Nl.3612.Ng.21015, c(3,6,12), c(3,6,12), nDay = 20, gen.pd = 24)
x13 <- flt(Nl.124.Ng.4816, c(1,2,4), c(4,8,16), nDay = 20, gen.pd = 24)
d <- rbind(x1,x2,x3,x4,x5,x6,x7,x8,x9)
d <- rbind(x1,x2,x3,x4,x5,x6,x7,x8,x9)
d.lm <- lm(fit ~ poly(days,3, raw = T) + Nl1 + Nl2 + Nl3 + Ng1 + Ng2 + Ng3, d)
d.lm1 <- lm(fit.1 ~ poly(days,3, raw = T) + Nl1 + Nl2 + Nl3 + Ng1 + Ng2 + Ng3, d)
d.lm2 <- lm(fit.2 ~ poly(days,3, raw = T) + Nl1 + Nl2 + Nl3 + Ng1 + Ng2 + Ng3, d)
d.lm3 <- lm(fit.3 ~ poly(days,3, raw = T) + Nl1 + Nl2 + Nl3 + Ng1 + Ng2 + Ng3, d)
# User input
Nl1 <- 3; Nl2 <- 6; Nl3 = 10; Ng1 = 6; Ng2 = 10; Ng3 = 12
# construct new data using user input
newD <- data.frame(days = 1:30, Nl1, Nl2, Nl3, Ng1, Ng2, Ng3)
newD1 <- data.frame(days = 1:30, Nl1, Nl2, Nl3, Ng1, Ng2, Ng3)
newD2 <- data.frame(days = 1:30, Nl1, Nl2, Nl3, Ng1, Ng2, Ng3)
newD3 <- data.frame(days = 1:30, Nl1, Nl2, Nl3, Ng1, Ng2, Ng3)
# predict fitness based on user input
fit.pred <- predict(d.lm, newdata = newD)
fit1.pred <- predict(d.lm1, newdata = newD1)
fit2.pred <- predict(d.lm2, newdata = newD2)
fit3.pred <- predict(d.lm3, newdata = newD3)
plot(1:30, fit.pred)
points(1:30, fit1.pred)
points(1:30, fit2.pred)
points(1:30, fit3.pred)
dev.off()
shiny::runApp()
runApp()
setwd("C:/Users/Ahmad Abdel-Azim/Desktop/simulate package/SAR")
setwd("C:/Users/Ahmad Abdel-Azim/Desktop/simulationShinyR")
load("C:/Users/Ahmad Abdel-Azim/Desktop/simulationShinyR/.RData")
d.lm <- lm(fit ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3, d)
d.lm1 <- lm(fit.1 ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3, d)
d.lm2 <- lm(fit.2 ~ poly(days,3, raw = T) +Nl2 + Nl3 + Ng1 + Ng3, d)
d.lm3 <- lm(fit.3 ~ poly(days,3, raw = T) +Nl2 + Nl3 + Ng1 + Ng3, d)
# User input
Nl1 <- 3; Nl2 <- 6; Nl3 = 10; Ng1 = 6; Ng2 = 10; Ng3 = 12
# construct new data using user input
newD <- data.frame(days = 1:30, Nl1, Nl2, Nl3, Ng1, Ng2, Ng3)
newD1 <- data.frame(days = 1:30, Nl1, Nl2, Nl3, Ng1, Ng2, Ng3)
newD2 <- data.frame(days = 1:30, Nl1, Nl2, Nl3, Ng1, Ng2, Ng3)
newD3 <- data.frame(days = 1:30, Nl1, Nl2, Nl3, Ng1, Ng2, Ng3)
# predict fitness based on user input
fit.pred <- predict(d.lm, newdata = newD)
fit1.pred <- predict(d.lm1, newdata = newD1)
fit2.pred <- predict(d.lm2, newdata = newD2)
fit3.pred <- predict(d.lm3, newdata = newD3)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
summary(d.lm)
dim(d)
head(d)
head(d)
head(x1)
dim(x1)
dim(cbind(x1,1))
head(cbind(x1,1))
# Construct d with an end field of scenario number
d <- rbind(cbind(x1,1), cbind(x2,2),cbind(x3,3),cbind(x4,4),cbind(x5,5),cbind(x6,6),cbind(x7,7),cbind(x8,8),cbind(x9,9))
head(cbind(x1,2))
?rbind
# Construct d with an end field of scenario number
d <- rbind(cbind(x1,1), cbind(x2,2),cbind(x3,3),cbind(x4,4),cbind(x5,5),cbind(x6,6),cbind(x7,7),cbind(x8,8),cbind(x9,9), make.row.names=F)
mode(x1)
dim(x9)
head(d)
d$scenario <- rep(1:9, each = 20)
head(d)
table(d$scenario)
d$scenario <- NULL
head(d)
# Construct d with an end field of scenario number
d$scenario.ms <- rep(1:3, each = 60)
d$scenario.g <- rep(rep(1:3, each = 20), 3)
head(d)
table(d$scenario.ms, d$scenario.g)
tail(d)
# Introduce scenario and interaction to the LM
d.lm <- lm(fit ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms*scenario.g, d)
summary(d.lm)
d.lm <- lm(fit ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3, d)
summary(d.lm)
# Introduce scenario and interaction to the LM
d.lm <- lm(fit ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
summary(d.lm)
d.lm <- lm(fit ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm1 <- lm(fit.1 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm2 <- lm(fit.2 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm3 <- lm(fit.3 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
# User input
Nl1 <- 3; Nl2 <- 6; Nl3 = 10; Ng1 = 6; Ng2 = 10; Ng3 = 12
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
newD1 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
newD2 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
newD3 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
# predict fitness based on user input
fit.pred <- predict(d.lm, newdata = newD)
fit1.pred <- predict(d.lm1, newdata = newD1)
fit2.pred <- predict(d.lm2, newdata = newD2)
fit3.pred <- predict(d.lm3, newdata = newD3)
# Introduce scenario and interaction to the LM
d.lm <- lm(fit ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm1 <- lm(fit.1 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm2 <- lm(fit.2 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm3 <- lm(fit.3 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
# User input
Nl1 <- 3; Nl2 <- 6; Nl3 = 10; Ng1 = 6; Ng2 = 10; Ng3 = 12
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
newD1 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
newD2 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
newD3 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
# predict fitness based on user input
fit.pred <- predict(d.lm, newdata = newD)
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
# User input
Nl1 <- 3; Nl2 <- 6; Nl3 = 10; Ng1 = 6; Ng2 = 10; Ng3 = 12; scenario.ms = 2; scenario.g = 2
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD1 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
newD2 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
# User input
Nl1 <- 3; Nl2 <- 6; Nl3 = 10; Ng1 = 6; Ng2 = 10; Ng3 = 12; scenario.ms = 2; scenario.g = 2
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD1 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD2 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD3 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
# predict fitness based on user input
fit.pred <- predict(d.lm, newdata = newD)
fit1.pred <- predict(d.lm1, newdata = newD1)
fit2.pred <- predict(d.lm2, newdata = newD2)
fit3.pred <- predict(d.lm3, newdata = newD3)
runApp()
plot(1:30, fit.pred)
points(1:30, fit1.pred)
points(1:30, fit2.pred)
points(1:30, fit3.pred)
dev.off()
points(1:30, fit1.pred)
plot(1:30, fit.pred)
points(1:30, fit1.pred)
d.lm1 <- lm(fit.1 ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
# User input
Nl1 <- 3; Nl2 <- 6; Nl3 = 10; Ng1 = 6; Ng2 = 10; Ng3 = 12; scenario.ms = 2; scenario.g = 2
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD1 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD2 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD3 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
# predict fitness based on user input
fit.pred <- predict(d.lm, newdata = newD)
fit1.pred <- predict(d.lm1, newdata = newD1)
fit2.pred <- predict(d.lm2, newdata = newD2)
fit3.pred <- predict(d.lm3, newdata = newD3)
plot(1:30, fit.pred)
points(1:30, fit1.pred)
plot(1:30, fit1.pred)
summary(d.lm1)
d.lm1 <- lm(fit.1 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
summary(d.lm1)
# Introduce scenario and interaction to the LM
d.lm <- lm(fit ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm1 <- lm(fit.1 ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm2 <- lm(fit.2 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm3 <- lm(fit.3 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
# User input
Nl1 <- 3; Nl2 <- 6; Nl3 = 10; Ng1 = 6; Ng2 = 10; Ng3 = 12; scenario.ms = 2; scenario.g = 2
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD1 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD2 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD3 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
# predict fitness based on user input
fit.pred <- predict(d.lm, newdata = newD)
fit1.pred <- predict(d.lm1, newdata = newD1)
fit2.pred <- predict(d.lm2, newdata = newD2)
fit3.pred <- predict(d.lm3, newdata = newD3)
plot(1:30, fit.pred)
points(1:30, fit1.pred)
points(1:30, fit2.pred)
points(1:30, fit3.pred)
dev.off()
gwd
gwd()
getwd()
library(shiny); runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
scenario.ms:scenario.g
x:y
x <- 2
y <- 3
x:y
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
d.lm <- reactive({
lm(fit ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
})
d.lm
summary(d.lm)
rm(d.lm)
rm(x)
rm(y)
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
d
runApp('shinyApp.R')
runApp('shinyApp.R')
newdD2
newD2
newD2
newD1
data.frame(days = 1:10, Nl2 = 10, Nl3 = 10, Ng1 = 6, Ng3 = 12)
predict(d.lm2, newdata = newD2())
newD2 <- data.frame(days = 1:10, Nl2 = 10, Nl3 = 10, Ng1 = 6, Ng3 = 12)
predict(lm(fit.2 ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3, d), newdata = newD2
)
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
