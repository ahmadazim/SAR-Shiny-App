summary(d.lm)
# Introduce scenario and interaction to the LM
d.lm <- lm(fit ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
summary(d.lm)
d.lm <- lm(fit ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm1 <- lm(fit.1 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm2 <- lm(fit.2 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm3 <- lm(fit.3 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
# User input
Nl1 <- 3; Nl2 <- 6; Nl3 = 10; Ng1 = 6; Ng2 = 10; Ng3 = 12
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
newD1 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
newD2 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
newD3 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
# predict fitness based on user input
fit.pred <- predict(d.lm, newdata = newD)
fit1.pred <- predict(d.lm1, newdata = newD1)
fit2.pred <- predict(d.lm2, newdata = newD2)
fit3.pred <- predict(d.lm3, newdata = newD3)
# Introduce scenario and interaction to the LM
d.lm <- lm(fit ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm1 <- lm(fit.1 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm2 <- lm(fit.2 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm3 <- lm(fit.3 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
# User input
Nl1 <- 3; Nl2 <- 6; Nl3 = 10; Ng1 = 6; Ng2 = 10; Ng3 = 12
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
newD1 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
newD2 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
newD3 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
# predict fitness based on user input
fit.pred <- predict(d.lm, newdata = newD)
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
# User input
Nl1 <- 3; Nl2 <- 6; Nl3 = 10; Ng1 = 6; Ng2 = 10; Ng3 = 12; scenario.ms = 2; scenario.g = 2
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD1 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
newD2 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3)
# User input
Nl1 <- 3; Nl2 <- 6; Nl3 = 10; Ng1 = 6; Ng2 = 10; Ng3 = 12; scenario.ms = 2; scenario.g = 2
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD1 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD2 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD3 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
# predict fitness based on user input
fit.pred <- predict(d.lm, newdata = newD)
fit1.pred <- predict(d.lm1, newdata = newD1)
fit2.pred <- predict(d.lm2, newdata = newD2)
fit3.pred <- predict(d.lm3, newdata = newD3)
runApp()
plot(1:30, fit.pred)
points(1:30, fit1.pred)
points(1:30, fit2.pred)
points(1:30, fit3.pred)
dev.off()
points(1:30, fit1.pred)
plot(1:30, fit.pred)
points(1:30, fit1.pred)
d.lm1 <- lm(fit.1 ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
# User input
Nl1 <- 3; Nl2 <- 6; Nl3 = 10; Ng1 = 6; Ng2 = 10; Ng3 = 12; scenario.ms = 2; scenario.g = 2
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD1 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD2 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD3 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
# predict fitness based on user input
fit.pred <- predict(d.lm, newdata = newD)
fit1.pred <- predict(d.lm1, newdata = newD1)
fit2.pred <- predict(d.lm2, newdata = newD2)
fit3.pred <- predict(d.lm3, newdata = newD3)
plot(1:30, fit.pred)
points(1:30, fit1.pred)
plot(1:30, fit1.pred)
summary(d.lm1)
d.lm1 <- lm(fit.1 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
summary(d.lm1)
# Introduce scenario and interaction to the LM
d.lm <- lm(fit ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm1 <- lm(fit.1 ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm2 <- lm(fit.2 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm3 <- lm(fit.3 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
# User input
Nl1 <- 3; Nl2 <- 6; Nl3 = 10; Ng1 = 6; Ng2 = 10; Ng3 = 12; scenario.ms = 2; scenario.g = 2
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD1 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD2 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
newD3 <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
# predict fitness based on user input
fit.pred <- predict(d.lm, newdata = newD)
fit1.pred <- predict(d.lm1, newdata = newD1)
fit2.pred <- predict(d.lm2, newdata = newD2)
fit3.pred <- predict(d.lm3, newdata = newD3)
plot(1:30, fit.pred)
points(1:30, fit1.pred)
points(1:30, fit2.pred)
points(1:30, fit3.pred)
dev.off()
gwd
gwd()
getwd()
library(shiny); runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
scenario.ms:scenario.g
x:y
x <- 2
y <- 3
x:y
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
d.lm <- reactive({
lm(fit ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
})
d.lm
summary(d.lm)
rm(d.lm)
rm(x)
rm(y)
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
d
runApp('shinyApp.R')
runApp('shinyApp.R')
newdD2
newD2
newD2
newD1
data.frame(days = 1:10, Nl2 = 10, Nl3 = 10, Ng1 = 6, Ng3 = 12)
predict(d.lm2, newdata = newD2())
newD2 <- data.frame(days = 1:10, Nl2 = 10, Nl3 = 10, Ng1 = 6, Ng3 = 12)
predict(lm(fit.2 ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3, d), newdata = newD2
)
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
Nl.11015.Ng.101010
dim(Nl.11015.Ng.101010)
dim(Nl.11015.Ng.21015)
dim(Nl.11015.Ng.61012)
dim(Nl.124.Ng.21015)
# Construct d with an end field of success rate
d$success <- 0
d
dim(Nl.124.Ng.21015)
d$success[1:20,] <- 99
dim(d)
d$success[,1:20] <- 99
d
d$success[1,] <- 99
d
dim(Nl.124.Ng.21015)
View(d)
d[d$scenario.ms == 1 & d$scenario.g == 1,"success"] <- 99
dim(Nl.124.Ng.61012)
dim(Nl.124.Ng.101010)
dim(Nl.1610.Ng.21015)
dim(Nl.1610.Ng.61012)
dim(Nl.1610.Ng.101010)
dim(Nl.11015.Ng.21015)
dim(Nl.11015.Ng.61012)
dim(Nl.11015.Ng.101010)
d[d$scenario.ms == 1 & d$scenario.g == 1,"success"] <- 99
d[d$scenario.ms == 1 & d$scenario.g == 3,"success"] <- 75
d[d$scenario.ms == 1 & d$scenario.g == 1,"success"] <- 100
d[d$scenario.ms == 1 & d$scenario.g == 2,"success"] <- 60
d[d$scenario.ms == 1 & d$scenario.g == 3,"success"] <- 80
d[d$scenario.ms == 1 & d$scenario.g == 1,"success"] <- 99
d[d$scenario.ms == 1 & d$scenario.g == 2,"success"] <- 65
d[d$scenario.ms == 1 & d$scenario.g == 2,"success"] <- 61
d[d$scenario.ms == 1 & d$scenario.g == 3,"success"] <- 76
d[d$scenario.ms == 1 & d$scenario.g == 1,"success"] <- 99
d[d$scenario.ms == 1 & d$scenario.g == 2,"success"] <- 60
d[d$scenario.ms == 1 & d$scenario.g == 3,"success"] <- 75
d[d$scenario.ms == 2 & d$scenario.g == 1,"success"] <- 100
d[d$scenario.ms == 2 & d$scenario.g == 2,"success"] <- 65
d[d$scenario.ms == 2 & d$scenario.g == 3,"success"] <- 80
d[d$scenario.ms == 3 & d$scenario.g == 1,"success"] <- 99
d[d$scenario.ms == 3 & d$scenario.g == 2,"success"] <- 61
d[d$scenario.ms == 3 & d$scenario.g == 3,"success"] <- 76
View(x4)
# Introduce success rate to LM
d.lm <- lm(fit ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g + success, d)
d.lm1 <- lm(fit.1 ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g + success, d)
d.lm2 <- lm(fit.2 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g + success, d)
d.lm3 <- lm(fit.3 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g + success, d)
summary(d.lm)
# Predict success rate from sections
success.lm <- lm(success ~ days + Nl2 + Nl3 + Ng1 + Ng3, d)
summary(success.lm)
# User input
Nl1 <- 3; Nl2 <- 6; Nl3 = 10; Ng1 = 6; Ng2 = 10; Ng3 = 12; scenario.ms = 2; scenario.g = 2
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
predict(success.lm, newdata = newD)
View(d)
# User input
Nl1 <- 1; Nl2 <- 2; Nl3 = 4; Ng1 = 2; Ng2 = 10; Ng3 = 15
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
predict(success.lm, newdata = newD)
summary(success.lm)
# Predict success rate from sections
success.lm <- lm(success ~ Nl2 + Nl3 + Ng1 + Ng3 + fit, d)
summary(success.lm)
# Predict success rate from sections
success.lm <- lm(success ~ Nl2 + Nl3 + Ng1 + Ng3 + fit.1, d)
summary(success.lm)
# Predict success rate from sections
success.lm <- lm(success ~ Nl2 + Nl3 + Ng1 + Ng3 + fit, d)
summary(success.lm)
# Predict success rate from sections
success.lm <- lm(success ~ Nl2 + Nl3 + Ng1 + Ng3, d)
summary(success.lm)
summary(success.lm)
library(shiny); runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
ui <- navbarPage(
theme = shinytheme("sandstone"),
"Effect of Bacterial Genotype on Growth Levels Over Multiple Exposures",
tabPanel("Simulation",
fluidPage(
sidebarLayout(
sidebarPanel(
numericInput("Nl2", "Number of loci in second section",
value = 6),
numericInput("Nl3", "Number of loci in third section",
value = 10),
numericInput("Ng1", "Number of genes in first-section loci",
value = 2),
numericInput("Ng3", "Number of genes in third-section loci",
value = 12),
sliderInput("days", "Length of Simulation, in Days",
min = 2,
max = 40,
value = 30),
sliderInput("ylim", label = "y-axis range",
min = 0,
max = 3,
value = c(0, 1.2),
step = 0.1),
uiInput("success")
),
mainPanel(
plotOutput("simulate"),
textOutput("successRate")
)
)
)
),
navbarMenu(
"Fitness Levels by Section",
tabPanel("Overall Genome Fitness Levels",
fluidPage(
sidebarLayout(
sidebarPanel(
numericInput("Nl2.O", "Number of loci in second section",
value = 6),
numericInput("Nl3.O", "Number of loci in third section",
value = 10),
numericInput("Ng1.O", "Number of genes in first-section loci",
value = 2),
numericInput("Ng3.O", "Number of genes in third-section loci",
value = 12),
sliderInput("days.O", "Length of Simulation, in Days",
min = 2,
max = 40,
value = 30),
sliderInput("ylim.O", label = "y-axis range",
min = 0,
max = 3,
value = c(0, 1.2),
step = 0.1)
),
mainPanel(plotOutput("overall"))
)
)
),
tabPanel("Section 1 Fitness Levels",
fluidPage(
sidebarLayout(
sidebarPanel(
numericInput("Nl2.1", "Number of loci in second section",
value = 6),
numericInput("Nl3.1", "Number of loci in third section",
value = 10),
numericInput("Ng1.1", "Number of genes in first-section loci",
value = 2),
numericInput("Ng3.1", "Number of genes in third-section loci",
value = 12),
sliderInput("days.1", "Length of Simulation, in Days",
min = 2,
max = 40,
value = 30),
sliderInput("ylim.1", label = "y-axis range",
min = 0,
max = 3,
value = c(0, 1.2),
step = 0.1)
),
mainPanel(plotOutput("sect1"))
)
)
),
tabPanel("Section 2 Fitness Levels",
fluidPage(
sidebarLayout(
sidebarPanel(
numericInput("Nl2.2", "Number of loci in second section",
value = 6),
numericInput("Nl3.2", "Number of loci in third section",
value = 10),
numericInput("Ng1.2", "Number of genes in first-section loci",
value = 2),
numericInput("Ng3.2", "Number of genes in third-section loci",
value = 12),
sliderInput("days.2", "Length of Simulation, in Days",
min = 2,
max = 40,
value = 30),
sliderInput("ylim.2", label = "y-axis range",
min = 0,
max = 3,
value = c(0, 1.2),
step = 0.1)
),
mainPanel(plotOutput("sect2"))
)
)
),
tabPanel("Section 3 Fitness Levels",
fluidPage(
sidebarLayout(
sidebarPanel(
numericInput("Nl2.3", "Number of loci in second section",
value = 6),
numericInput("Nl3.3", "Number of loci in third section",
value = 10),
numericInput("Ng1.3", "Number of genes in first-section loci",
value = 2),
numericInput("Ng3.3", "Number of genes in third-section loci",
value = 12),
sliderInput("days.3", "Length of Simulation, in Days",
min = 2,
max = 40,
value = 30),
sliderInput("ylim.3", label = "y-axis range",
min = 0,
max = 3,
value = c(0, 1.2),
step = 0.1)
),
mainPanel(plotOutput("sect3"))
)
)
)
), collapsible = TRUE
)
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
predict(success.lm, newdata = newD)
# User input
Nl1 <- 3; Nl2 <- 6; Nl3 = 10; Ng1 = 6; Ng2 = 10; Ng3 = 12; scenario.ms = 2; scenario.g = 2
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
predict(success.lm, newdata = newD)
runApp('shinyApp.R')
# User input
Nl1 <- 1; Nl2 <- 6; Nl3 = 10; Ng1 = 6; Ng2 = 10; Ng3 = 12; scenario.ms = 2; scenario.g = 2
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
predict(success.lm, newdata = newD)
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('C:/Users/Ahmad Abdel-Azim/Desktop/xc')
runApp('shinyApp.R')
runApp('shinyApp.R')
library(shiny); runApp('shinyApp.R')
library(shiny)
library(DT)
library(SAR)
library(shinythemes)
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
library(shiny); runApp('shinyApp.R')
# predict fitness based on user input
fit.pred <- predict(d.lm, newdata = newD)
# construct new data using user input
newD <- data.frame(days = 1:30, Nl2, Nl3, Ng1, Ng3, scenario.ms, scenario.g)
# predict fitness based on user input
fit.pred <- predict(d.lm, newdata = newD)
fit1.pred <- predict(d.lm1, newdata = newD1)
d.lm
d.lm <- lm(fit ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3, d)
d.lm1 <- lm(fit.1 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3, d)
d.lm2 <- lm(fit.2 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3, d)
d.lm3 <- lm(fit.3 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3, d)
# Introduce scenario and interaction to the LM
d.lm <- lm(fit ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm1 <- lm(fit.1 ~ poly(days,3, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm2 <- lm(fit.2 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
d.lm3 <- lm(fit.3 ~ poly(days,2, raw = T) + Nl2 + Nl3 + Ng1 + Ng3 + scenario.ms:scenario.g, d)
# Predict success rate from sections
success.lm <- lm(success ~ Nl2 + Nl3 + Ng1 + Ng3, d)
# predict fitness based on user input
fit.pred <- predict(d.lm, newdata = newD)
predict(d.lm, newdata = newD)
fit1.pred <- predict(d.lm1, newdata = newD1)
predict(d.lm1, newdata = newD1)
predict(d.lm1, newdata = newD1)
predict(d.lm1, newdata = newD1, interval = c(0,1))
predict(d.lm1, newdata = newD1, interval = "prediction")
predict(d.lm1, newdata = newD1, interval = "confidence")
predict(d.lm1, newdata = newD1, interval = "confidence", level = .99)
predict(d.lm1, newdata = newD1, interval = "confidence", level = .9)
predict(d.lm1, newdata = newD1, interval = "confidence", level = .01)
?glm
fit.'pred
fit.pred
fit.pred[1]
fit.pred[2]
# predict fitness based on user input
fit.pred <- predict(d.lm, newdata = newD)
fit.pred
for(i in 1:length(fit.pred)){
if (fit.pred[i] > 1) fit.pred == 1
}
fit.pred
fit1.pred <- predict(d.lm1, newdata = newD1)
fit1.pred
for(i in 1:length(fit1.pred)){
if (fit1.pred[i] > 1) fit1.pred == 1
}
fit1.pred
if (fit1.pred[i] > 1) fit1.pred == 1
for(i in 1:length(fit1.pred)){
if (fit1.pred[i] > 1) fit1.pred[i] == 1
}
fit1.pred
for(i in 1:length(fit1.pred)){
if (fit1.pred[i] > 1) {fit1.pred[i] == 1}
}
fit1.pred
if (fit1.pred[i] > 1) {fit1.pred[i] == 1}
fit1.pred[30] > 1
fit1.pred <- predict(d.lm1, newdata = newD1)
for(i in 1:length(fit1.pred)){
if (isTRUE(fit1.pred[i] > 1)) {fit1.pred[i] == 1}
}
fit1.pred
fit1.pred[30] ==1
fit1.pred[30] = 1
fit1.pred
fit1.pred <- predict(d.lm1, newdata = newD1)
for(i in 1:length(fit1.pred)){
if (fit1.pred[i] > 1) fit1.pred[i] = 1
}
fit1.pred
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
runApp('shinyApp.R')
return(fit1.pred[i])
return(fit1.pred[1])
fit1.pred[1]
ifelse(fit.pred1()[i] > 1) fit.pred1()[i] = 1
runApp('shinyApp.R')
